import questionary
import os
import json

finished = False
tickdata = {"values": []}

ACTIONS = ("Add player head block", "Add custom head block", "Quit")

MCMETA_CONTENTS = """{
  "pack": {
    "pack_format": 18,
    "description": "Generated by Headblocks Generator."
  }
}
"""

datapack_name = questionary.text("Enter the datapack name:", "headblocks").ask()
os.mkdir(datapack_name)
os.makedirs(os.path.join(datapack_name, "data", datapack_name, "functions"))
os.makedirs(os.path.join(datapack_name, "data", "minecraft", "tags", "functions"))
os.makedirs(os.path.join(datapack_name, "data", datapack_name + "_tick", "functions"))

with open(os.path.join(datapack_name, "pack.mcmeta"), "w") as mcmetafile:
    mcmetafile.write(MCMETA_CONTENTS)

while not finished:
    action = questionary.select("Choose an action:", ACTIONS).ask()
    if action == "Quit":
        break
    elif action == "Add player head block" or action == "Add custom head block":
        if action == "Add player head block":
            blockdata = questionary.text(
                "Enter the name of the player who owns the head of your block:"
            ).ask()
            blockname = blockdata
            blockdata = '"' + blockdata + '"'
        if action == "Add custom head block":
            blockdata = questionary.text("Enter the SkullOwner data for your block:").ask()
            blockname = questionary.text("Enter the name of your block:").ask()
        with open(
            os.path.join(
                datapack_name,
                "data",
                datapack_name,
                "functions",
                blockname.lower() + ".mcfunction",
            ),
            "w",
        ) as functionfile:
            functionfile.write(
                """give @p allay_spawn_egg{EntityTag:{id:marker,Tags:["headblocks_%s"]},display:{Name:'[{"text":"%s","italic":false}]'}} 1"""
                % (blockname, blockname)
            )
        with open(
            os.path.join(
                datapack_name,
                "data",
                datapack_name + "_tick",
                "functions",
                blockname.lower() + ".mcfunction",
            ),
            "w",
        ) as functionfile:
            functionfile.write(
                """execute as @e[type=marker,tag=headblocks_%s] at @s run summon item_display ~ ~1 ~ {transformation:{left_rotation:[0f,0f,0f,1f],right_rotation:[0f,0f,0f,1f],translation:[0f,0f,0f],scale:[2f,2f,2f]},item:{id:"minecraft:player_head",Count:1b,tag:{SkullOwner:%s}}}
                               execute as @e[type=marker,tag=headblocks_%s] at @s run setblock ~ ~ ~ barrier
                               kill @e[type=marker,tag=headblocks_%s]
                               """
                % (blockname, blockdata, blockname, blockname)
            )
        tickdata["values"].append(f"{datapack_name}_tick:{blockname.lower()}")
with open(
    os.path.join(
        datapack_name,
        "data",
        datapack_name,
        "functions",
        "removertool.mcfunction",
    ),
    "w",
) as functionfile:
    functionfile.write(
        """give @p strider_spawn_egg{EntityTag:{id:marker,Tags:["headblocks_removertool"]},display:{Name:'[{"text":"Remover Tool","italic":false}]'}} 1"""
    )
with open(
    os.path.join(
        datapack_name,
        "data",
        datapack_name + "_tick",
        "functions",
        "removertool.mcfunction",
    ),
    "w",
) as functionfile:
    functionfile.write(
        """execute as @e[type=marker,tag=headblocks_removertool] at @s run kill @e[type=item_display,distance=0..1]
                               execute as @e[type=marker,tag=headblocks_removertool] at @s run setblock ~ ~-1 ~ air
                               kill @e[type=marker,tag=headblocks_removertool]
                               """
    )
tickdata["values"].append(f"{datapack_name}_tick:removertool")
with open(
    os.path.join(datapack_name, "data", "minecraft", "tags", "functions", "tick.json"),
    "w",
) as tickjsonfile:
    json.dump(tickdata, tickjsonfile)
